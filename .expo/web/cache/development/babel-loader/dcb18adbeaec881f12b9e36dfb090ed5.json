{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Sveiki\\\\PhpstormProjects\\\\xCourierApplication\\\\react-native-firebase\\\\src\\\\screens\\\\ScanScreen\\\\ScanScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { firebase } from \"../../firebase/config\";\nexport default function BarcodeScanner(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      entityText = _useState6[0],\n      setEntityText = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      entities = _useState8[0],\n      setEntities = _useState8[1];\n\n  var entityRef = firebase.firestore().collection('shipments');\n  var userID = props.additionalProps.extraData.displayName;\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n\n    entityRef.where(\"pickupDriver\", \"==\", userID).onSnapshot(function (querySnapshot) {\n      var newEntities = [];\n      querySnapshot.forEach(function (doc) {\n        var entity = doc.data();\n        entity.id = doc.id;\n        newEntities.push(entity);\n      });\n      setEntities(newEntities);\n      console.log(newEntities);\n    }, function (error) {\n      console.log(error);\n    });\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type = _ref.type,\n        data = _ref.data;\n    setScanned(true);\n    alert(\"Bar code with type \" + type + \" and data \" + data + \" has been scanned!\");\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 16\n      }\n    }, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 16\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: StyleSheet.absoluteFillObject,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }), scanned && React.createElement(Button, {\n    title: 'Skanuoti dar kartą',\n    onPress: function onPress() {\n      return setScanned(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/Sveiki/PhpstormProjects/xCourierApplication/react-native-firebase/src/screens/ScanScreen/ScanScreen.js"],"names":["React","useState","useEffect","BarCodeScanner","firebase","BarcodeScanner","props","hasPermission","setHasPermission","scanned","setScanned","entityText","setEntityText","entities","setEntities","entityRef","firestore","collection","userID","additionalProps","extraData","displayName","requestPermissionsAsync","status","where","onSnapshot","querySnapshot","newEntities","forEach","doc","entity","data","id","push","console","log","error","handleBarCodeScanned","type","alert","styles","container","undefined","StyleSheet","absoluteFillObject","create","flex","flexDirection","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Text, View, StyleSheet, Button } from 'react-native';\r\nimport { BarCodeScanner } from 'expo-barcode-scanner';\r\nimport {firebase} from \"../../firebase/config\";\r\n\r\nexport default function BarcodeScanner(props) {\r\n    const [hasPermission, setHasPermission] = useState(null);\r\n    const [scanned, setScanned] = useState(false);\r\n    const [entityText, setEntityText] = useState('')\r\n    const [entities, setEntities] = useState([])\r\n\r\n    const entityRef = firebase.firestore().collection('shipments')\r\n    const userID = props.additionalProps.extraData.displayName;\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const { status } = await BarCodeScanner.requestPermissionsAsync();\r\n            setHasPermission(status === 'granted');\r\n        })();\r\n        entityRef\r\n            .where(\"pickupDriver\", \"==\", userID)\r\n            // .orderBy('createdAt', 'desc')\r\n            .onSnapshot(\r\n                querySnapshot => {\r\n                    const newEntities = []\r\n                    querySnapshot.forEach(doc => {\r\n                        const entity = doc.data()\r\n                        entity.id = doc.id\r\n                        newEntities.push(entity)\r\n                    });\r\n                    setEntities(newEntities)\r\n                    console.log(newEntities)\r\n\r\n                },\r\n                error => {\r\n                    console.log(error)\r\n                }\r\n            )\r\n    }, []);\r\n\r\n    const handleBarCodeScanned = ({ type, data }) => {\r\n        setScanned(true);\r\n        alert(`Bar code with type ${type} and data ${data} has been scanned!`);\r\n    };\r\n\r\n    if (hasPermission === null) {\r\n        return <Text>Requesting for camera permission</Text>;\r\n    }\r\n    if (hasPermission === false) {\r\n        return <Text>No access to camera</Text>;\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <BarCodeScanner\r\n                onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\r\n                style={StyleSheet.absoluteFillObject}\r\n            />\r\n            {scanned && <Button title={'Skanuoti dar kartą'} onPress={() => setScanned(false)} />}\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n    },\r\n});"]},"metadata":{},"sourceType":"module"}