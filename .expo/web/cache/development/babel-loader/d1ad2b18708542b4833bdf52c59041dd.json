{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Sveiki\\\\PhpstormProjects\\\\xCourierApplication\\\\react-native-firebase\\\\src\\\\screens\\\\PickupScreen\\\\PickupScreen.js\";\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport styles from \"./styles\";\nimport { firebase } from \"../../firebase/config\";\nexport default function PickupScreen(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      entityText = _useState2[0],\n      setEntityText = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      entities = _useState4[0],\n      setEntities = _useState4[1];\n\n  var entityRef = firebase.firestore().collection('shipments');\n  console.log(props.additionalProps.extraData.displayName);\n  useEffect(function () {\n    entityRef.where(\"pickupDriver\", \"==\", \"Kazimieras\").onSnapshot(function (querySnapshot) {\n      var newEntities = [];\n      querySnapshot.forEach(function (doc) {\n        var entity = doc.data();\n        entity.id = doc.id;\n        newEntities.push(entity);\n      });\n      setEntities(newEntities);\n    }, function (error) {\n      console.log(error);\n    });\n  }, []);\n\n  var renderEntity = function renderEntity(_ref) {\n    var item = _ref.item,\n        index = _ref.index;\n    return React.createElement(View, {\n      style: styles.entityContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: styles.entityText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }, item.number, \"  \", item.receiverAddress));\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, entities && React.createElement(View, {\n    style: styles.listContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, React.createElement(FlatList, {\n    data: entities,\n    renderItem: renderEntity,\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    removeClippedSubviews: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/Sveiki/PhpstormProjects/xCourierApplication/react-native-firebase/src/screens/PickupScreen/PickupScreen.js"],"names":["React","useEffect","useState","styles","firebase","PickupScreen","props","entityText","setEntityText","entities","setEntities","entityRef","firestore","collection","console","log","additionalProps","extraData","displayName","where","onSnapshot","querySnapshot","newEntities","forEach","doc","entity","data","id","push","error","renderEntity","item","index","entityContainer","number","receiverAddress","container","listContainer"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;;AAEA,OAAOC,MAAP;AACA,SAASC,QAAT;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA,kBAEJJ,QAAQ,CAAC,EAAD,CAFJ;AAAA;AAAA,MAEjCK,UAFiC;AAAA,MAErBC,aAFqB;;AAAA,mBAGRN,QAAQ,CAAC,EAAD,CAHA;AAAA;AAAA,MAGjCO,QAHiC;AAAA,MAGvBC,WAHuB;;AAKxC,MAAMC,SAAS,GAAGP,QAAQ,CAACQ,SAAT,GAAqBC,UAArB,CAAgC,WAAhC,CAAlB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACU,eAAN,CAAsBC,SAAtB,CAAgCC,WAA5C;AACAjB,EAAAA,SAAS,CAAC,YAAM;AACZU,IAAAA,SAAS,CACJQ,KADL,CACW,cADX,EAC2B,IAD3B,EACiC,YADjC,EAGKC,UAHL,CAIQ,UAAAC,aAAa,EAAI;AACb,UAAMC,WAAW,GAAG,EAApB;AACAD,MAAAA,aAAa,CAACE,OAAd,CAAsB,UAAAC,GAAG,EAAI;AACzB,YAAMC,MAAM,GAAGD,GAAG,CAACE,IAAJ,EAAf;AACAD,QAAAA,MAAM,CAACE,EAAP,GAAYH,GAAG,CAACG,EAAhB;AACAL,QAAAA,WAAW,CAACM,IAAZ,CAAiBH,MAAjB;AACH,OAJD;AAKAf,MAAAA,WAAW,CAACY,WAAD,CAAX;AACH,KAZT,EAaQ,UAAAO,KAAK,EAAI;AACLf,MAAAA,OAAO,CAACC,GAAR,CAAYc,KAAZ;AACH,KAfT;AAiBH,GAlBQ,EAkBN,EAlBM,CAAT;;AAwCA,MAAMC,YAAY,GAAG,SAAfA,YAAe,OAAmB;AAAA,QAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,QAAXC,KAAW,QAAXA,KAAW;AACpC,WACI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE7B,MAAM,CAAC8B,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE9B,MAAM,CAACI,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKwB,IAAI,CAACG,MADV,QACoBH,IAAI,CAACI,eADzB,CADJ,CADJ;AAOH,GARD;;AAUA,SAII,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEhC,MAAM,CAACiC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACM3B,QAAQ,IACN,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEN,MAAM,CAACkC,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AACI,IAAA,IAAI,EAAE5B,QADV;AAEI,IAAA,UAAU,EAAEqB,YAFhB;AAGI,IAAA,YAAY,EAAE,sBAACC,IAAD;AAAA,aAAUA,IAAI,CAACJ,EAAf;AAAA,KAHlB;AAII,IAAA,qBAAqB,EAAE,IAJ3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFR,CAJJ;AAkBH","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { FlatList, Keyboard, Text, TextInput, TouchableOpacity, View } from 'react-native'\r\nimport styles from './styles';\r\nimport { firebase } from '../../firebase/config';\r\n\r\nexport default function PickupScreen(props) {\r\n\r\n    const [entityText, setEntityText] = useState('')\r\n    const [entities, setEntities] = useState([])\r\n\r\n    const entityRef = firebase.firestore().collection('shipments')\r\n    // const userID = props.extraData.displayName;\r\n    console.log(props.additionalProps.extraData.displayName);\r\n    useEffect(() => {\r\n        entityRef\r\n            .where(\"pickupDriver\", \"==\", \"Kazimieras\")\r\n            // .orderBy('createdAt', 'desc')\r\n            .onSnapshot(\r\n                querySnapshot => {\r\n                    const newEntities = []\r\n                    querySnapshot.forEach(doc => {\r\n                        const entity = doc.data()\r\n                        entity.id = doc.id\r\n                        newEntities.push(entity)\r\n                    });\r\n                    setEntities(newEntities)\r\n                },\r\n                error => {\r\n                    console.log(error)\r\n                }\r\n            )\r\n    }, [])\r\n\r\n    // const onAddButtonPress = () => {\r\n    //     if (entityText && entityText.length > 0) {\r\n    //         const timestamp = firebase.firestore.FieldValue.serverTimestamp();\r\n    //         const data = {\r\n    //             text: entityText,\r\n    //             authorID: userID,\r\n    //             createdAt: timestamp,\r\n    //         };\r\n    //         entityRef\r\n    //             .add(data)\r\n    //             .then(_doc => {\r\n    //                 setEntityText('')\r\n    //                 Keyboard.dismiss()\r\n    //             })\r\n    //             .catch((error) => {\r\n    //                 alert(error)\r\n    //             });\r\n    //     }\r\n    // }\r\n\r\n    const renderEntity = ({item, index}) => {\r\n        return (\r\n            <View style={styles.entityContainer}>\r\n                <Text style={styles.entityText}>\r\n                    {item.number}  {item.receiverAddress}\r\n                </Text>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    return (\r\n        // <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n        //     <Text>PickupScreen Screen!</Text>\r\n        // </View>\r\n        <View style={styles.container}>\r\n            { entities && (\r\n                <View style={styles.listContainer}>\r\n                    <FlatList\r\n                        data={entities}\r\n                        renderItem={renderEntity}\r\n                        keyExtractor={(item) => item.id}\r\n                        removeClippedSubviews={true}\r\n                    />\r\n\r\n                </View>\r\n            )}\r\n        </View>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}