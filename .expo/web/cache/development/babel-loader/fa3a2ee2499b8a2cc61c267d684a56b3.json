{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Sveiki\\\\PhpstormProjects\\\\xCourierApplication\\\\react-native-firebase\\\\src\\\\screens\\\\PickupScreen\\\\PickupScreen.js\";\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { firebase } from \"../../firebase/config\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nvar Tab = createBottomTabNavigator();\nexport default function PickupScreen(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      entityText = _useState2[0],\n      setEntityText = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      entities = _useState4[0],\n      setEntities = _useState4[1];\n\n  var entityRef = firebase.firestore().collection('shipments');\n  var userID = props.extraData.id;\n  console.log(props);\n  useEffect(function () {\n    entityRef.where(\"pickupDriver\", \"==\", \"Kazimieras\").onSnapshot(function (querySnapshot) {\n      var newEntities = [];\n      querySnapshot.forEach(function (doc) {\n        var entity = doc.data();\n        entity.id = doc.id;\n        newEntities.push(entity);\n      });\n      setEntities(newEntities);\n    }, function (error) {\n      console.log(error);\n    });\n  }, []);\n\n  var onAddButtonPress = function onAddButtonPress() {\n    if (entityText && entityText.length > 0) {\n      var timestamp = firebase.firestore.FieldValue.serverTimestamp();\n      var data = {\n        text: entityText,\n        authorID: userID,\n        createdAt: timestamp\n      };\n      entityRef.add(data).then(function (_doc) {\n        setEntityText('');\n        Keyboard.dismiss();\n      }).catch(function (error) {\n        alert(error);\n      });\n    }\n  };\n\n  var renderEntity = function renderEntity(_ref) {\n    var item = _ref.item,\n        index = _ref.index;\n    return React.createElement(View, {\n      style: styles.entityContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: styles.entityText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }, item.number, \"  \", item.receiverAddress));\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, entities && React.createElement(View, {\n    style: styles.listContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, React.createElement(FlatList, {\n    data: entities,\n    renderItem: renderEntity,\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    removeClippedSubviews: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/Sveiki/PhpstormProjects/xCourierApplication/react-native-firebase/src/screens/PickupScreen/PickupScreen.js"],"names":["React","useEffect","useState","firebase","NavigationContainer","createBottomTabNavigator","Tab","PickupScreen","props","entityText","setEntityText","entities","setEntities","entityRef","firestore","collection","userID","extraData","id","console","log","where","onSnapshot","querySnapshot","newEntities","forEach","doc","entity","data","push","error","onAddButtonPress","length","timestamp","FieldValue","serverTimestamp","text","authorID","createdAt","add","then","_doc","Keyboard","dismiss","catch","alert","renderEntity","item","index","styles","entityContainer","number","receiverAddress","container","listContainer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { FlatList, Keyboard, Text, TextInput, TouchableOpacity, View } from 'react-native'\r\n// import styles from './styles';\r\nimport { firebase } from '../../firebase/config';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport {createBottomTabNavigator} from '@react-navigation/bottom-tabs';\r\n\r\nconst Tab = createBottomTabNavigator();\r\nexport default function PickupScreen(props) {\r\n\r\n    const [entityText, setEntityText] = useState('')\r\n    const [entities, setEntities] = useState([])\r\n\r\n    const entityRef = firebase.firestore().collection('shipments')\r\n    const userID = props.extraData.id\r\n    console.log(props);\r\n    useEffect(() => {\r\n        entityRef\r\n            .where(\"pickupDriver\", \"==\", \"Kazimieras\")\r\n            // .orderBy('createdAt', 'desc')\r\n            .onSnapshot(\r\n                querySnapshot => {\r\n                    const newEntities = []\r\n                    querySnapshot.forEach(doc => {\r\n                        const entity = doc.data()\r\n                        entity.id = doc.id\r\n                        newEntities.push(entity)\r\n                    });\r\n                    setEntities(newEntities)\r\n                },\r\n                error => {\r\n                    console.log(error)\r\n                }\r\n            )\r\n    }, [])\r\n\r\n    const onAddButtonPress = () => {\r\n        if (entityText && entityText.length > 0) {\r\n            const timestamp = firebase.firestore.FieldValue.serverTimestamp();\r\n            const data = {\r\n                text: entityText,\r\n                authorID: userID,\r\n                createdAt: timestamp,\r\n            };\r\n            entityRef\r\n                .add(data)\r\n                .then(_doc => {\r\n                    setEntityText('')\r\n                    Keyboard.dismiss()\r\n                })\r\n                .catch((error) => {\r\n                    alert(error)\r\n                });\r\n        }\r\n    }\r\n\r\n    const renderEntity = ({item, index}) => {\r\n        return (\r\n            <View style={styles.entityContainer}>\r\n                <Text style={styles.entityText}>\r\n                    {item.number}  {item.receiverAddress}\r\n                </Text>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    return (\r\n        // <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n        //     <Text>PickupScreen Screen!</Text>\r\n        // </View>\r\n        <View style={styles.container}>\r\n            { entities && (\r\n                <View style={styles.listContainer}>\r\n                    <FlatList\r\n                        data={entities}\r\n                        renderItem={renderEntity}\r\n                        keyExtractor={(item) => item.id}\r\n                        removeClippedSubviews={true}\r\n                    />\r\n\r\n                </View>\r\n            )}\r\n        </View>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}